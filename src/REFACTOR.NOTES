Bank Account application study and refactoring notes
====================================================

1. 		Still Needed/Did not address
		============================

		These are enhancements that the analyst found important but because of: 
		
			- time constraints, 
			- lack of database persistence 
			
				or 
				
			- data necessary 
			
		the developer could not implement. 
		
		Items in this list should be revisited with the user to confirm that 
		these are either important to implement or should be ignored.

1.1 	Currency reporting
		==================
		1. 	Accounts should have associated country where the account is domiciled
		2. 	Customer should have preference as to base currency to report on
		3. 	Bank should have preference as to base currency to report on

1.2		New/Hidden requirements
		=======================

		These are features that were not specified, but that the developer considered 
		important enough to create a well rounded application.

		1. 	Interest earned should be a transaction in itself

1.3		Assumptions
		===========
		
1.3.1	It is assumed that all reporting content/structure has already been defined by the user and 
		should not be changed. As such, we are assuming that the tests, since the comparisons are 
		string based ( NOT IDEAL ) are valid. 
		
1.3.2	Any changes to the class design should conform to the EXISTING tests.

1.3.3	We are not addressing Latency or performance - this is not a criteria for this study

1.3.4	Will not factor in monthly closing periods and creating interest payments at month close or 
		misc adjustments to accounts
		
TODO's - Given more Time
======

2. 	Create a AccountStatement object to enable specific settings for all
	Account statements
	
3. 	Create a CustomerStatement class to encapsulate specific settings for 
	individual customer accounts
	
4. 	TransactionManager class - Manages creation and commiting of transactions. Factory patter.	

6. 	Add settings/preferences loading for the following classes: 

	Customer:		Currency format
					Statement class to use 
	
	Account:		Statement class to use
	
	Bank:
	
	Application:	
	
7. 		Should be a transaction factory that creates the transaction 
		and does not commit the transaction unti the user either issues a commit or 
		abort. Should it have states? ( i.e. what the user intended vs. what was done.
	
8.	Bank::format() method needs to be looked at .. its a cluge.

11. Dynamic loading of the Statement class to use when generating a statement for both
	Customer and Account classes	


Customer class
==============

TODO
----


COMPLETED
---------
1.	Moved Customer::toDollars to the Utils class and defined as static so that its more generic.

Account class 
=============

TODO: 
-----

 - 	Create an AccountManager class that is responsible for creating all the accounts
 	and keeping track of properties for each account. 
 
	Customer::openAccount - Should call AccountManager::openAccount()  which will 
	return the account that was opened.
	
- 	Specific classes for each account type

- 	Create account properties

- 	integrate new properties driven rates into test harness	

 	
COMPLETED:
----------
1. 	Moved the static final account types into an AccountType enum 
	in the AccountType.java file. Provides for type safety.

2. 	Replaced the static final account types with an AccountType
 	enum.

3. 	Documented/Analyzed customer class.

4.	Moved the management of the transaction list to a TransactionList class in order
	to keep the Account and Transaction list logic separate and consolidated.
 	 	
Bank class
==========

1.	Created Javadoc comments for all class/methods

2. 	Removed unused/superfluous methods:
	
	Bank::getFirstCustomer **UNUSED**
	
3.	Moved Bank::makePlural to the Utils class and define as static so that its more generic.
 	
Transaction class
=================

1. Changed constructor to force a TransactionType when creating a new transaction.

TramsactionType class (NEW)
===========================

1. 	Created a new transaction type class to force strongly typed transactions in 
	order to have constant behavior across all transactions.
	
2. 	Transaction types are the following: 

	WITHDRAWAL 		- a customer withdrawal from the account
	DEPOSIT			- a customer deposit into the account
	INTEREST		- an interest payment into the account
	TRANSFER_IN		- a transfer into the account from another account
	TRANSFER_OUT	- a transfer out of the account from another account
	MULTI_LEG 		- a multi-legged transaction (for transfers )
	
Date Provider class (REMOVED)
===================
Although this is a singleton, there is no compelling reason that this should be a class by itself as
there is only one method and it does not use and class level variables or objects. It will be simpler
to move to a Utils class as make static.

1. Moved now() method to the Utils class and made static

2. Removed the DateProvider class as it is no longer necessary.