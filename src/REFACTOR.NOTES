Bank Account application refactoring notes
==========================================


1. 		Still Needed/Did not address
		============================

		These are enhancements that the developer considers important but because of time constraints, 
		lack of database persistance or data, should be revisited with the user to confirm that these
		are or should be required.

1.1 	Currency reporting
		==================
		1. 	Accounts should have associated country where the account is domiciled
		2. 	Customer should have preference as to base currency to report on
		3. 	Bank should have preference as to base currency to report on

1.2		New/Hidden requirements
		=======================

		These are features that were not specified, but that the developer considered 
		important enough to create a well rounded application.

		1. 	Interest earned should be a transaction in itself

2.		Assumptions
		===========
		
2.1		It is assumed that all reporting content/structure has already been defined by the user and 
		should not be changed. As such, we are assuming that the tests, since the comparisons are 
		string based ( NOT IDEAL ) are valid. 
		
2.2		Any changes to the class design should conform to the EXISTING tests.
		

TODO's
======
1. 	Check and throw exceptions for any object when passed into method: 
	
	Customer::statementForAccount

2. 	Create a AccountStatement object to enable specific settings for all
	Account statements
	
3. 	Create a CustomerStatement class to encapsulate specific settings for 
	individual customer accounts

4. 	Move utility methods into a more general class: 
	
	Customer::toDollars - should this be specific to the customers currency?

5. 	Transaction class should conform to transaction types: 

	Customer deposit
	Customer withdrawal
	Interest earned
	Transfer between accounts

6. 	Add settings/preferences loading for the following classes: 

	Customer:		Currency format
	
	Account:
	
	Bank:
	
	Application:	
	
7. 	Should transaction have a transaction factory that creates the transaction 
	and does not commit the transaction unti the user either issues a commit or 
	abort. Should it have states? ( i.e. what the user intended vs. what was done.
	
8.	Bank::format() method needs to be looked at .. its a cluge.

9.	Make a junit test for the Account class

10.	Make a Junit suite to test all classes for streamlined continuous build
	

Customer class
==============


Account class 
=============

1. 	Moved the static final account types into an AccountType enum 
	in the AccountType.java file. Provides for type safety.

2. 	Replaced the static final account types with an AccountType
 	enum.

3. 	Documented/Analyzed customer class.
 	
 	
 	
Bank class
==========

1.	Created Javadoc comments for all class/methods

2. 	Removed unused/superfluous methods:
	
	Bank::getFirstCustomer **UNUSED**
	

 	
Transaction
===========