Bank Account application study and refactoring notes
====================================================

1		Assumptions
		===========
		
1.1		Report Formatting

		It is assumed that all reporting content/structure has already been defined by the user and 
		should not be changed. As such, we are assuming that the tests, since the comparisons are 
		string based ( NOT IDEAL ) are valid. 
		
1.2		Existing Tests 
		
		Except where errors have been found, no existing tests will be removed, but corrected to
		conform to the EXISTING requirements as they are user driven.

1.3		Latency
		-------
		
		We are not addressing Latency or performance - this is not a criteria for this study

1.4		Posting interest 
		----------------
		
		
		Will not factor in monthly closing periods and posting interest payments at month close or 
		misc adjustments to accounts


2. 		Still Needed/Did not address
		============================

		These are enhancements, issues, known problems that were either not completed, ignored or
		simplified due to: 
		
		 	- time constraints, 
			- lack of an RDBMS or similar
		
		These issues would need to be revisited if the applications was to be considered to be complete. 

2.1 	Transfers
	
		- 	Transfers do not currently check to make sure that the accounts belong to one customer only - Not 
			enough time to implement.
			
		- 	No notion of committing transactions - This is mostly needed for multi-leg transactions such
			as transfers - To complex for this example. Would need more time to implement.

2.2		Error correction/logging

		- 	Currently, the logger, is a no-op logger. Meaning, that for the purposes of illustration, different classes
			call the logger, but nothing is done.
		
			Adding either the default logger or log4j, would be considered overly complex for this exercise.

2.3		Interest Rate

		-  	As developed, the application does not allow to post interest once already posted for a given day.
			The application should allow for the re-running of interest rate calculations.
		 
		- 	The calculation implemented for this release is an extremely oversimplified periodic interest calculation based on the 
			current balance and the last time the rate was applied. THIS IS NOT CORRECT.
			
			In a more robust application, the balances would be kept on a daily basis so that interest could be
			calculated and applied to each day, individually. 

		- 	Used a simple periodic rate calculator. In an more robust application, each account could be defined
			as 30/360, 30/365, etc... and more exact interest rate could be applied to the account.
	
TODO's - Given more Time
======

2. 	Create a AccountStatement object to enable specific settings for all
	Account statements
	
3. 	Create a CustomerStatement class to encapsulate specific settings for 
	individual customer accounts
	
4. 	TransactionManager class - Manages creation and commiting of transactions. Factory patter.	

6. 	Add settings/preferences loading for account types
	
7. 		Should be a transaction factory that creates the transaction 
		and does not commit the transaction unti the user either issues a commit or 
		abort. Should it have states? ( i.e. what the user intended vs. what was done.
	
8.	Bank::format() method needs to be looked at .. its a cluge.

11. Dynamic loading of the Statement class to use when generating a statement for both
	Customer and Account classes	
	
12. Add functionality to re-run interest rate calculation - will need different data structures to 
	accomodate.


Customer class
==============

TODO
----


COMPLETED
---------
1.	Moved Customer::toDollars to the Utils class and defined as static so that its more generic.

Account class 
=============

TODO: 
-----

 - 	Create an AccountManager class that is responsible for creating all the accounts
 	and keeping track of properties for each account. 
 
	Customer::openAccount - Should call AccountManager::openAccount()  which will 
	return the account that was opened.
	
- 	Specific classes for each account type

- 	Create account properties

- 	integrate new properties driven rates into test harness	

 	
COMPLETED:
----------
1. 	Moved the static final account types into an AccountType enum 
	in the AccountType.java file. Provides for type safety.

2. 	Replaced the static final account types with an AccountType
 	enum.

3. 	Documented/Analyzed customer class.

4.	Moved the management of the transaction list to a TransactionList class in order
	to keep the Account and Transaction list logic separate and consolidated.
 	 	
Bank class
==========

1.	Created Javadoc comments for all class/methods

2. 	Removed unused/superfluous methods:
	
	Bank::getFirstCustomer **UNUSED**
	
3.	Moved Bank::makePlural to the Utils class and define as static so that its more generic.
 	
Transaction class
=================

TODO
----
1. 	Interest earned should be a transaction in itself

COMPLETED
---------
1. 	Changed constructor to force a TransactionType when creating a new transaction.

2. 	Changed the Transaction class to be abstract and defined specific implementations for 
	each type of transaction. 
	
	DepositTransaction 
	WithdrawalTransaction 


TramsactionType class (NEW)
===========================

TODO
----

COMPLETED
---------
1. 	Created a new transaction type class to force strongly typed transactions in 
	order to have constant behavior across all transactions.
	
2. 	Transaction types are the following: 

	WITHDRAWAL 		- a customer withdrawal from the account
	DEPOSIT			- a customer deposit into the account
	INTEREST		- an interest payment into the account
	TRANSFER_IN		- a transfer into the account from another account
	TRANSFER_OUT	- a transfer out of the account from another account
	MULTI_LEG 		- a multi-legged transaction (for transfers )
	
3. 	Within TransactionTypes a OpCode enumeration has been created in able to strongly 
	define what operation each transaction has on the balance.
	
	
Date Provider class (REMOVED)
===================
Although this is a singleton, there is no compelling reason that this should be a class by itself as
there is only one method and it does not use and class level variables or objects. It will be simpler
to move to a Utils class as make static.

1. Moved now() method to the Utils class and made static

2. Removed the DateProvider class as it is no longer necessary.